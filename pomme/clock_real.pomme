/* Je garde les secondes dans r1, les minutes dans r2 et les heures dans r3. 
	 r4, rax, rbx et rcx sont mes registres de travail.
	 rck récupère le temps réel, en secondes (indispensable dans clock_real).
	 Dans la RAM de travail :
		Adresse 0 : le jour
		Adresse 1 : le mois
		Adresse 2 : les deux premiers chiffres de l'année (cf plus tard)
		Adresse 3 : les deux derniers chiffres de l'année
		Adresse 4 : année mod 4
		Adresses 5 à 16 : le nombre de jours de chaque mois
		
	 Dans la seconde RAM de sortie (utilisé pour l'affichage sept segments / batons) :
		Dans l'ordre des adresses de 0 à 6 :
		les secondes, les minutes, les heures, le jour (+1), le mois (+1), 
		les deux premiers chiffres de l'année, les deux derniers. 
*/
		
load_rom (0) r1 // Les secondes
sept_batons r1 (0)
load_rom (1) r2 // Les minutes
sept_batons r2 (1)
load_rom (2) r3 // Les heures
sept_batons r3 (2)

// Le jour actuel, entre 0 et 30.
load_rom (3) r4
save r4 (0) 
add 1 r4
sept_batons r4 (3) // Jour + 1 pour aller de 1 à 31

// Le mois entre 0 et 11
load_rom (4) r4
save r4 (1) 
add 1 r4                                                                 
sept_batons r4 (4)

/* L'année :
	 Un nombre en batons vaut au plus 99, donc je coupe l'année en deux,
	 avec les deux premiers chiffres (de poids forts) puis les deux suivants.
	 Je garde aussi en mémoire l'année mod 4, pour les années bissextiles. */
load_rom (5) r4 // Les deux premiers chiffres, de poids forts
save r4 (2)
sept_batons r4 (5)
load_rom (6) r4 // Les deux derniers, de poids faibles
save r4 (3)
sept_batons r4 (6)

// Je calcule à la main année mod 4 une fois pour l'initialisation.
// rem : pour connaitre année mod 4, les deux chiffres de poids 
// faibles suffisent en base 10
Moins4:
	sub 4 r4
	jump_non_neg Moins4
	add 4 r4
	save r4 (4)

// Ensuite il faut sauvegarder le nombre de jours de chaque mois.
// Je traite février en année bissextile plus tard.
set 31 r4
save r4 (5)
set 28 r4
save r4 (6)
set 31 r4
save r4 (7)
set 30 r4
save r4 (8)
set 31 r4
save r4 (9)
set 30 r4
save r4 (10)
set 31 r4
save r4 (11)
set 31 r4
save r4 (12)
set 30 r4
save r4 (13)
set 31 r4
save r4 (14)
set 30 r4
save r4 (15)
set 31 r4
save r4 (16)

/* SI on veut passer par la ROM_input, voilà un exemple :
set 0 rax 
Save_nb_mois:
	load_rom ($rax + 7) r4
	save r4 ($rax + 5)
	add 1 rax
	move rax rbx
	xor rbx 12
	jump_non_nul Save_nb_mois
*/

/* Fonctionnement de l'horloge réelle : on se base sur la parité du
	 nombre réel de secondes. On attend un changement de parité. */

Attente0:
	move_real_clock rck
	and $rck rck
	jump_non_nul Attente0
	jump Corps

Attente1:
	move_real_clock rck
	and $rck rck
	jump_nul Attente1
	jump Corps

Corps:
	// Les secondes :
	incrz 60 r1 // Incrémente et si = 60 alors 0.
	sept_batons r1 (0)
	and $r1 r1 // Pour le flag
	jump_non_nul Fin_Corps

	// Les minutes :
	incrz 60 r2
	sept_batons r2 (1)
	and $r2 r2
	jump_non_nul Fin_Corps

	// Les heures :
	incrz 24 r3
	sept_batons r3 (2)
	and $r3 r3
	jump_non_nul Fin_Corps

	// Le jour :
	load (0) rax // jour actuel
	load (1) rbx // mois actuel
	// Gestion de l'année bissextile :
	load (4) r4 // année mod 4
	and $r4 r4 // Pour le flag
	jump_non_nul Pas_fevrier_biss
	move rbx r4
	xor 1 r4 // 1 <=> février
	jump_non_nul Pas_fevrier_biss
	set 29 rcx
	jump Fin_fevrier_biss
	Pas_fevrier_biss:
	load ($rbx + 5) rcx
	Fin_fevrier_biss:
	// Fin de gestion de l'année bissextile
	incrz $rcx rax
	save rax (0)
	move rax r4
	add 1 r4
	sept_batons r4 (3) // Jour + 1 pour aller de 1 à 31
	and $rax rax
	jump_non_nul Fin_Corps

	// Le mois
	incrz 12 rbx
	save rbx (1)
	move rbx r4
	add 1 r4
	sept_batons r4 (4)
	and $rbx rbx
	jump_non_nul Fin_Corps

	// L'année
	load (4) rcx // année mod 4
	incrz 4 rcx
	save rcx (4) 
	load (3) rbx // les deux chiffres de poids faibles
	incrz 100 rbx
	save rbx (3)
	sept_batons rbx (6)
	and $rbx rbx
	jump_non_nul Fin_Corps
	load (2) rax // les deux chiffres de poids forts
	add 1 rax
	sept_batons rax (5)
	save rax (2)

Fin_Corps:
	and $rck rck
	jump_nul Attente1
	jump Attente0

